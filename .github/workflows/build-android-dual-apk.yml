name: Build Android APK (Demo + Normal)

on:
  workflow_dispatch:
  push:
    branches: [main]
    paths:
      - 'benvis/**'
      - '.github/workflows/build-android-dual-apk.yml'

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      # 1) Checkout — SHA pinned
      - name: Checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      # 2) Java 17 — SHA pinned
      - name: Set up Java 17 (Temurin)
        uses: actions/setup-java@2dfa2011c5b2a0f1489bf9e433881c92c1631f88 # v4.3.0
        with:
          distribution: temurin
          java-version: '17'

      # 3) Install Flutter from git (no cache, no marketplace action)
      - name: Install Flutter (stable)
        shell: bash
        run: |
          set -euo pipefail
          FLUTTER_HOME="$HOME/flutter"
          git clone --depth 1 -b stable https://github.com/flutter/flutter.git "$FLUTTER_HOME"
          echo "$FLUTTER_HOME/bin" >> "$GITHUB_PATH"
          export PATH="$FLUTTER_HOME/bin:$PATH"
          flutter --version
          flutter config --no-analytics
          flutter doctor -v
          flutter precache --android

      # 4) Install Android SDK manually
      - name: Install Android SDK cmdline-tools
        shell: bash
        run: |
          set -e
          mkdir -p "$HOME/android-sdk"
          cd "$HOME/android-sdk"
          curl -L -o cmdline-tools.zip https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip
          unzip -q cmdline-tools.zip
          rm -f cmdline-tools.zip
          mkdir -p cmdline-tools/latest
          mv cmdline-tools/* cmdline-tools/latest/ 2>/dev/null || true
          echo "$HOME/android-sdk/cmdline-tools/latest/bin" >> "$GITHUB_PATH"
          echo "$HOME/android-sdk/platform-tools" >> "$GITHUB_PATH"
          echo "ANDROID_SDK_ROOT=$HOME/android-sdk" >> "$GITHUB_ENV"

      # 5) Accept licenses & install SDK 36
      - name: Install Android SDK components
        shell: bash
        run: |
          set -e
          yes | "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" --licenses || true
          "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" \
            "platform-tools" "platforms;android-36" "build-tools;35.0.0" || \
            "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" \
            "platform-tools" "platforms;android-34" "build-tools;34.0.0"

      # 6) Prepare Gradle wrapper
      - name: Prepare Gradle wrapper
        working-directory: benvis/android
        run: |
          mkdir -p gradle/wrapper
          cat > gradle/wrapper/gradle-wrapper.properties <<'EOF'
          distributionUrl=https\://services.gradle.org/distributions/gradle-8.7-all.zip
          EOF

      # 7) Flutter pub get
      - name: Flutter pub get
        working-directory: benvis
        run: |
          export PATH="$HOME/flutter/bin:$PATH"
          flutter pub get

      # 8) Build DEMO APK
      - name: Build DEMO APK
        working-directory: benvis
        run: |
          export PATH="$HOME/flutter/bin:$PATH"
          flutter build apk --release --split-per-abi --dart-define=DEMO_MODE=true 2>&1 | tee $GITHUB_WORKSPACE/build_demo.log
          mkdir -p $GITHUB_WORKSPACE/outputs/demo
          cp build/app/outputs/flutter-apk/*.apk $GITHUB_WORKSPACE/outputs/demo/ || true

      # 9) Clean before normal build
      - name: Clean for normal build
        working-directory: benvis
        run: |
          export PATH="$HOME/flutter/bin:$PATH"
          flutter clean
          flutter pub get

      # 10) Build NORMAL APK
      - name: Build NORMAL APK
        working-directory: benvis
        run: |
          export PATH="$HOME/flutter/bin:$PATH"
          flutter build apk --release --split-per-abi --dart-define=DEMO_MODE=false 2>&1 | tee $GITHUB_WORKSPACE/build_normal.log
          mkdir -p $GITHUB_WORKSPACE/outputs/normal
          cp build/app/outputs/flutter-apk/*.apk $GITHUB_WORKSPACE/outputs/normal/ || true

      # 11) List outputs
      - name: List built APKs
        run: |
          echo "=== DEMO APKs ==="
          ls -lh $GITHUB_WORKSPACE/outputs/demo/ || echo "No demo APKs"
          echo "=== NORMAL APKs ==="
          ls -lh $GITHUB_WORKSPACE/outputs/normal/ || echo "No normal APKs"

      # 12) Upload artifacts — SHA pinned
      - name: Upload APKs and logs
        if: always()
        uses: actions/upload-artifact@50769540e7f4bd5e21e526ee35c689e35e0d6874 # v4.4.0
        with:
          name: benvis-apks
          path: |
            ${{ github.workspace }}/outputs/**/*.apk
            ${{ github.workspace }}/build_demo.log
            ${{ github.workspace }}/build_normal.log
          if-no-files-found: warn
