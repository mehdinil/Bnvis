name: Build Android APK (SHA-pinned + adaptive)

on:
  workflow_dispatch:
  push:
    paths:
      - '**.zip'
      - '**/pubspec.yaml'
      - '.github/workflows/build-android-apk.yml'

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      # 1) Checkout — SHA pinned
      - name: Checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      # 2) Java 17 — SHA pinned (no cache)
      - name: Set up Java 17 (Temurin)
        uses: actions/setup-java@2dfa2011c5b2a0f1489bf9e433881c92c1631f88 # v4.3.0
        with:
          distribution: temurin
          java-version: '17'

      # 3) Install Flutter from git — NO marketplace action to avoid cache
      - name: Install Flutter (stable)
        shell: bash
        run: |
          set -e
          git clone --depth 1 -b stable https://github.com/flutter/flutter.git "$HOME/flutter"
          echo "$HOME/flutter/bin" >> "$GITHUB_PATH"
          flutter --version
          flutter config --no-analytics
          flutter precache

      # 4) Install Android SDK manually
      - name: Install Android SDK cmdline-tools
        shell: bash
        run: |
          set -e
          mkdir -p "$HOME/android-sdk"
          cd "$HOME/android-sdk"
          curl -L -o cmdline-tools.zip https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip
          unzip -q cmdline-tools.zip
          rm -f cmdline-tools.zip
          mkdir -p cmdline-tools/latest
          mv cmdline-tools/* cmdline-tools/latest/ 2>/dev/null || true
          echo "$HOME/android-sdk/cmdline-tools/latest/bin" >> "$GITHUB_PATH"
          echo "$HOME/android-sdk/platform-tools" >> "$GITHUB_PATH"
          echo "ANDROID_HOME=$HOME/android-sdk" >> "$GITHUB_ENV"
          echo "ANDROID_SDK_ROOT=$HOME/android-sdk" >> "$GITHUB_ENV"

      # 5) Accept licenses & install SDK 36
      - name: Install Android SDK components
        shell: bash
        run: |
          set -e
          yes | "$HOME/android-sdk/cmdline-tools/latest/bin/sdkmanager" --licenses || true
          "$HOME/android-sdk/cmdline-tools/latest/bin/sdkmanager" \
            "platform-tools" \
            "platforms;android-36" \
            "build-tools;35.0.0" || \
          "$HOME/android-sdk/cmdline-tools/latest/bin/sdkmanager" \
            "platform-tools" \
            "platforms;android-34" \
            "build-tools;34.0.0"

      # 6) Install unzip tool
      - name: Install tools
        run: sudo apt-get update && sudo apt-get install -y unzip

      # 7) Unzip project if ZIP exists
      - name: Unzip project if ZIP exists
        run: |
          shopt -s nullglob
          mkdir -p unzipped
          zips=( *.zip **/*.zip )
          if [ ${#zips[@]} -gt 0 ]; then
            echo "Found ZIP(s): ${zips[@]}"
            for z in "${zips[@]}"; do unzip -q "$z" -d unzipped ; done
            echo "unzipped=true" >> $GITHUB_ENV
          else
            echo "unzipped=false" >> $GITHUB_ENV
          fi

      # 8) Auto-detect project
      - name: Locate Flutter project (pubspec.yaml)
        id: findproj
        shell: bash
        run: |
          set -e
          SEARCH_DIR="."
          if [ "$unzipped" = "true" ]; then SEARCH_DIR="unzipped"; fi
          
          # First try benvis directory
          if [ -d "benvis" ] && [ -f "benvis/pubspec.yaml" ]; then
            echo "project=benvis" >> "$GITHUB_OUTPUT"
            echo "Detected project at: benvis"
            exit 0
          fi
          
          # Otherwise search
          PROJECT_DIR=$(find "$SEARCH_DIR" -maxdepth 4 -type f -name "pubspec.yaml" | head -n 1 | xargs -I{} dirname {})
          if [ -z "$PROJECT_DIR" ]; then
            echo "❌ No Flutter project (pubspec.yaml) found." >&2
            exit 1
          fi
          echo "project=$PROJECT_DIR" >> "$GITHUB_OUTPUT"
          echo "Detected project at: $PROJECT_DIR"

      # 9) Create adaptive build script with multi-attempt logic
      - name: Create adaptive build script
        env:
          PROJ: ${{ steps.findproj.outputs.project }}
        run: |
          set -e
          cat > ci-build.sh <<'BASH'
          set -e
          PROJECT_DIR="${PROJ}"
          cd "$PROJECT_DIR"

          LOG_ROOT="$GITHUB_WORKSPACE"
          LOG="$LOG_ROOT/apk_build_log.txt"
          : > "$LOG"

          ensure_android_basics() {
            mkdir -p android
            # gradle.properties
            touch android/gradle.properties
            grep -q '^android.useAndroidX=' android/gradle.properties || echo 'android.useAndroidX=true' >> android/gradle.properties
            grep -q '^android.enableJetifier=' android/gradle.properties || echo 'android.enableJetifier=true' >> android/gradle.properties
            grep -q '^org.gradle.jvmargs=' android/gradle.properties || echo 'org.gradle.jvmargs=-Xmx4096m -Dfile.encoding=UTF-8' >> android/gradle.properties

            # compile/target/jvmTarget - use Kotlin DSL syntax
            if [ -f android/app/build.gradle ]; then
              sed -i 's/compileSdk[[:space:]]*=[[:space:]]*[0-9]\+/compileSdk = 36/' android/app/build.gradle || true
              sed -i 's/targetSdk[[:space:]]*=[[:space:]]*[0-9]\+/targetSdk = 36/' android/app/build.gradle || true
              grep -q 'kotlinOptions' android/app/build.gradle || printf '\nandroid {\n    kotlinOptions { jvmTarget = "17" }\n}\n' >> android/app/build.gradle
            fi
          }

          patch_gradle_wrapper() {
            V="$1"
            mkdir -p android/gradle/wrapper
            if [ -f android/gradle/wrapper/gradle-wrapper.properties ]; then
              sed -i "s#distributionUrl=.*#distributionUrl=https://services.gradle.org/distributions/gradle-${V}-all.zip#" android/gradle/wrapper/gradle-wrapper.properties || true
              sed -i '/distributionSha256/d' android/gradle/wrapper/gradle-wrapper.properties || true
            else
              cat > android/gradle/wrapper/gradle-wrapper.properties <<EOF
distributionUrl=https\://services.gradle.org/distributions/gradle-${V}-all.zip
EOF
            fi
          }

          fix_common_plugin_issues_if_needed() {
            # file_picker V1 embedding → bump to ^8
            if grep -q "PluginRegistry\\.Registrar" "$LOG" || grep -qi "Flutter v1" "$LOG"; then
              if [ -f pubspec.yaml ]; then
                sed -i -E 's/(^|[[:space:]])file_picker:[[:space:]]*\^?[0-9.]+/file_picker: ^8.0.0/' pubspec.yaml || true
              fi
            fi

            # minSdk mismatch (e.g., "uses-sdk:minSdkVersion X ...")
            if grep -E "uses-sdk:minSdkVersion[[:space:]]+[0-9]+" -m1 "$LOG" >/dev/null; then
              REQ=$(grep -E "uses-sdk:minSdkVersion[[:space:]]+[0-9]+" -m1 "$LOG" | sed -E 's/.*minSdkVersion[[:space:]]+([0-9]+).*/\1/')
              if [ -n "$REQ" ]; then
                if grep -q "minSdk" android/app/build.gradle 2>/dev/null; then
                  sed -i -E "s/minSdk[[:space:]]*=[[:space:]]*[0-9]+/minSdk = ${REQ}/" android/app/build.gradle || true
                else
                  # append a defaultConfig if missing
                  printf '\nandroid {\n  defaultConfig { minSdk = %s }\n}\n' "$REQ" >> android/app/build.gradle
                fi
              fi
            fi
          }

          attempt_build() {
            set +e
            flutter pub get 2>&1 | tee -a "$LOG"
            flutter build apk --release --split-per-abi 2>&1 | tee -a "$LOG"
            local rc=${PIPESTATUS[0]}
            set -e
            return $rc
          }

          ensure_android_basics

          # Start with Gradle 8.7; adapt if logs demand higher
          patch_gradle_wrapper "8.7"

          ATTEMPT=1
          MAX_ATTEMPTS=4
          while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
            echo "==== Attempt $ATTEMPT/$MAX_ATTEMPTS ====" | tee -a "$LOG"
            if attempt_build; then
              echo "BUILD_OK" | tee -a "$LOG"
              exit 0
            fi

            # If Gradle min required is higher, bump and retry
            if grep -E "Minimum supported Gradle version is[[:space:]]+([0-9.]+)" -m1 "$LOG" >/dev/null; then
              REQ=$(grep -E "Minimum supported Gradle version is[[:space:]]+([0-9.]+)" -m1 "$LOG" | sed -E 's/.*is[[:space:]]+([0-9.]+).*/\1/')
              if [ -n "$REQ" ]; then
                echo ">> Bump Gradle wrapper to $REQ" | tee -a "$LOG"
                patch_gradle_wrapper "$REQ"
                ATTEMPT=$((ATTEMPT+1))
                continue
              fi
            fi

            # Try to fix common issues then retry
            fix_common_plugin_issues_if_needed
            ATTEMPT=$((ATTEMPT+1))
          done

          echo "BUILD_FAILED_AFTER_${MAX_ATTEMPTS}_ATTEMPTS" | tee -a "$LOG"
          exit 1
          BASH
          chmod +x ci-build.sh

      # 10) Run adaptive build
      - name: Run adaptive build
        working-directory: ${{ steps.findproj.outputs.project }}
        run: |
          bash "$GITHUB_WORKSPACE/ci-build.sh"

      # 11) Upload artifacts — SHA pinned
      - name: Upload APK and logs
        if: always()
        uses: actions/upload-artifact@50769540e7f4bd5e21e526ee35c689e35e0d6874 # v4.4.0
        with:
          name: android-apk
          path: |
            ${{ steps.findproj.outputs.project }}/build/app/outputs/flutter-apk/*.apk
            ${{ github.workspace }}/apk_build_log.txt
