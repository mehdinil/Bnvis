name: Build Android APK (resilient)

on:
  workflow_dispatch:
  push:
    paths:
      - 'benvis/**'
      - '.github/workflows/build-android-apk.yml'

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    
    steps:
      - name: Checkout
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11
      
      - name: Setup Java 17
        uses: actions/setup-java@99b8673ff64fbf99d8d325f52d9a5bdedb8483e9
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'gradle'
      
      - name: Install Flutter manually
        run: |
          set -e
          cd $HOME
          git clone --depth 1 -b stable https://github.com/flutter/flutter.git
          echo "$HOME/flutter/bin" >> $GITHUB_PATH
          export PATH="$HOME/flutter/bin:$PATH"
          flutter --version
          flutter doctor -v
          flutter precache --android
      
      - name: Locate Flutter project
        id: project
        run: |
          if [ -d "benvis" ] && [ -f "benvis/pubspec.yaml" ]; then
            echo "dir=benvis" >> $GITHUB_OUTPUT
            echo "✅ Project found: benvis/"
          else
            echo "❌ benvis/ not found"
            exit 1
          fi
      
      - name: Patch Android config (baseline)
        working-directory: ${{ steps.project.outputs.dir }}/android
        run: |
          set -e
          
          # Gradle wrapper
          mkdir -p gradle/wrapper
          echo "distributionUrl=https\://services.gradle.org/distributions/gradle-8.7-all.zip" > gradle/wrapper/gradle-wrapper.properties
          
          # gradle.properties
          cat > gradle.properties <<EOF
          org.gradle.jvmargs=-Xmx4096m -Dfile.encoding=UTF-8
          android.useAndroidX=true
          android.enableJetifier=true
          android.nonTransitiveRClass=true
          EOF
          
          # app/build.gradle patches
          if [ -f app/build.gradle ]; then
            # Ensure namespace
            if ! grep -q "namespace" app/build.gradle; then
              sed -i '/android {/a \    namespace "com.benevis.lifeos"' app/build.gradle
            fi
            
            # Set SDK versions
            sed -i 's/compileSdk[[:space:]]*[0-9]\+/compileSdk 34/' app/build.gradle
            sed -i 's/targetSdk[[:space:]]*[0-9]\+/targetSdk 34/' app/build.gradle
            sed -i 's/minSdk[[:space:]]*[0-9]\+/minSdk 23/' app/build.gradle
            
            # Kotlin jvmTarget
            if ! grep -q "kotlinOptions" app/build.gradle; then
              sed -i '/android {/a \    kotlinOptions {\n        jvmTarget = "17"\n    }' app/build.gradle
            fi
            
            # Lint
            if ! grep -q "lintOptions\|lint {" app/build.gradle; then
              sed -i '/android {/a \    lint {\n        checkReleaseBuilds false\n        abortOnError false\n    }' app/build.gradle
            fi
          fi
          
          echo "✅ Android config patched"
      
      - name: Flutter dependencies
        working-directory: ${{ steps.project.outputs.dir }}
        run: |
          flutter --version
          flutter pub get
      
      - name: Generate code (build_runner)
        working-directory: ${{ steps.project.outputs.dir }}
        run: |
          echo "🔨 Running build_runner..."
          flutter pub run build_runner build --delete-conflicting-outputs || true
          echo "✅ Code generation complete"
      
      - name: Build DEMO APK (attempt 1)
        id: demo1
        continue-on-error: true
        working-directory: ${{ steps.project.outputs.dir }}
        run: |
          echo "🚀 Building DEMO APK (split-per-abi)..."
          flutter build apk --release --split-per-abi --dart-define=DEMO_MODE=true 2>&1 | tee $GITHUB_WORKSPACE/build_demo.log
      
      - name: Build DEMO APK (attempt 2 - universal)
        if: steps.demo1.outcome == 'failure'
        continue-on-error: true
        working-directory: ${{ steps.project.outputs.dir }}
        run: |
          echo "⚠️ Retry with Gradle 8.9 and universal APK..."
          echo "distributionUrl=https\://services.gradle.org/distributions/gradle-8.9-all.zip" > android/gradle/wrapper/gradle-wrapper.properties
          flutter clean
          flutter pub get
          flutter build apk --release --dart-define=DEMO_MODE=true 2>&1 | tee -a $GITHUB_WORKSPACE/build_demo.log
      
      - name: Build NORMAL APK (attempt 1)
        id: normal1
        continue-on-error: true
        working-directory: ${{ steps.project.outputs.dir }}
        run: |
          echo "🚀 Building NORMAL APK (split-per-abi)..."
          flutter build apk --release --split-per-abi --dart-define=DEMO_MODE=false 2>&1 | tee $GITHUB_WORKSPACE/build_normal.log
      
      - name: Build NORMAL APK (attempt 2 - universal)
        if: steps.normal1.outcome == 'failure'
        continue-on-error: true
        working-directory: ${{ steps.project.outputs.dir }}
        run: |
          echo "⚠️ Retry with universal APK..."
          flutter clean
          flutter pub get
          flutter build apk --release --dart-define=DEMO_MODE=false 2>&1 | tee -a $GITHUB_WORKSPACE/build_normal.log
      
      - name: List built APKs
        working-directory: ${{ steps.project.outputs.dir }}
        run: |
          echo "📦 Built APKs:"
          find build/app/outputs/flutter-apk/ -name "*.apk" -type f -exec ls -lh {} \; || echo "No APKs found"
      
      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3
        with:
          name: android-apk
          path: |
            ${{ steps.project.outputs.dir }}/build/app/outputs/flutter-apk/*.apk
            ${{ github.workspace }}/build_demo.log
            ${{ github.workspace }}/build_normal.log
          if-no-files-found: warn
