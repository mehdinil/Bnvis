name: Build Android APK (SHA-pinned + adaptive)

on:
  workflow_dispatch:
  push:
    paths:
      - '**.zip'
      - '**/pubspec.yaml'
      - '.github/workflows/build-android-apk.yml'

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      # 1) Checkout — SHA pinned
      - name: Checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      # 2) Java 17 — SHA pinned (no cache)
      - name: Set up Java 17 (Temurin)
        uses: actions/setup-java@2dfa2011c5b2a0f1489bf9e433881c92c1631f88 # v4.3.0
        with:
          distribution: temurin
          java-version: '17'

      # 3) Install Flutter from git — NO marketplace action to avoid cache
      - name: Install Flutter (stable)
        shell: bash
        run: |
          set -e
          git clone --depth 1 -b stable https://github.com/flutter/flutter.git "$HOME/flutter"
          echo "$HOME/flutter/bin" >> "$GITHUB_PATH"
          flutter --version
          flutter config --no-analytics
          flutter precache

      # 4) Install Android SDK manually
      - name: Install Android SDK cmdline-tools
        shell: bash
        run: |
          set -e
          mkdir -p "$HOME/android-sdk"
          cd "$HOME/android-sdk"
          curl -L -o cmdline-tools.zip https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip
          unzip -q cmdline-tools.zip
          rm -f cmdline-tools.zip
          mkdir -p cmdline-tools/latest
          mv cmdline-tools/* cmdline-tools/latest/ 2>/dev/null || true
          echo "$HOME/android-sdk/cmdline-tools/latest/bin" >> "$GITHUB_PATH"
          echo "$HOME/android-sdk/platform-tools" >> "$GITHUB_PATH"
          echo "ANDROID_HOME=$HOME/android-sdk" >> "$GITHUB_ENV"
          echo "ANDROID_SDK_ROOT=$HOME/android-sdk" >> "$GITHUB_ENV"

      # 5) Accept licenses & install SDK 36
      - name: Install Android SDK components
        shell: bash
        run: |
          set -e
          yes | "$HOME/android-sdk/cmdline-tools/latest/bin/sdkmanager" --licenses || true
          "$HOME/android-sdk/cmdline-tools/latest/bin/sdkmanager" \
            "platform-tools" \
            "platforms;android-36" \
            "build-tools;35.0.0" || \
          "$HOME/android-sdk/cmdline-tools/latest/bin/sdkmanager" \
            "platform-tools" \
            "platforms;android-34" \
            "build-tools;34.0.0"

      # 6) Install unzip tool
      - name: Install tools
        run: sudo apt-get update && sudo apt-get install -y unzip

      # 7) Unzip project if ZIP exists
      - name: Unzip project if ZIP exists
        run: |
          shopt -s nullglob
          mkdir -p unzipped
          zips=( *.zip **/*.zip )
          if [ ${#zips[@]} -gt 0 ]; then
            echo "Found ZIP(s): ${zips[@]}"
            for z in "${zips[@]}"; do unzip -q "$z" -d unzipped ; done
            echo "unzipped=true" >> $GITHUB_ENV
          else
            echo "unzipped=false" >> $GITHUB_ENV
          fi

      # 8) Auto-detect project
      - name: Locate Flutter project (pubspec.yaml)
        id: findproj
        shell: bash
        run: |
          set -e
          SEARCH_DIR="."
          if [ "$unzipped" = "true" ]; then SEARCH_DIR="unzipped"; fi
          
          # First try benvis directory
          if [ -d "benvis" ] && [ -f "benvis/pubspec.yaml" ]; then
            echo "project=benvis" >> "$GITHUB_OUTPUT"
            echo "Detected project at: benvis"
            exit 0
          fi
          
          # Otherwise search
          PROJECT_DIR=$(find "$SEARCH_DIR" -maxdepth 4 -type f -name "pubspec.yaml" | head -n 1 | xargs -I{} dirname {})
          if [ -z "$PROJECT_DIR" ]; then
            echo "No Flutter project found" >&2
            exit 1
          fi
          echo "project=$PROJECT_DIR" >> "$GITHUB_OUTPUT"
          echo "Detected project at: $PROJECT_DIR"

      # 9) Create adaptive build script
      - name: Create adaptive build script
        run: |
          cat > ci-build.sh << 'BUILDSCRIPT'
          #!/bin/bash
          set -e
          
          # Ensure Flutter is in PATH
          export PATH="$HOME/flutter/bin:$PATH"
          
          PROJECT_DIR="$1"
          if [ -z "$PROJECT_DIR" ]; then
            echo "ERROR: Project directory not provided"
            exit 1
          fi
          
          echo "Building project at: $PROJECT_DIR"
          cd "$PROJECT_DIR"
          
          LOG="$GITHUB_WORKSPACE/apk_build_log.txt"
          : > "$LOG"
          
          ensure_basics() {
            mkdir -p android
            touch android/gradle.properties
            grep -q 'android.useAndroidX' android/gradle.properties || echo 'android.useAndroidX=true' >> android/gradle.properties
            grep -q 'android.enableJetifier' android/gradle.properties || echo 'android.enableJetifier=true' >> android/gradle.properties
            grep -q 'org.gradle.jvmargs' android/gradle.properties || echo 'org.gradle.jvmargs=-Xmx4096m' >> android/gradle.properties
            
            if [ -f android/app/build.gradle ]; then
              sed -i 's/compileSdk *= *[0-9]\+/compileSdk = 36/' android/app/build.gradle || true
              sed -i 's/targetSdk *= *[0-9]\+/targetSdk = 36/' android/app/build.gradle || true
            fi
          }
          
          patch_gradle() {
            V="$1"
            mkdir -p android/gradle/wrapper
            echo "distributionUrl=https://services.gradle.org/distributions/gradle-${V}-all.zip" > android/gradle/wrapper/gradle-wrapper.properties
          }
          
          fix_issues() {
            if grep -q "PluginRegistry" "$LOG" 2>/dev/null; then
              sed -i -E 's/file_picker: *[^ ]*/file_picker: ^8.0.0/' pubspec.yaml 2>/dev/null || true
            fi
            
            if grep -E "minSdkVersion +[0-9]+" "$LOG" >/dev/null 2>&1; then
              REQ=$(grep -E "minSdkVersion +[0-9]+" "$LOG" | head -1 | grep -o '[0-9]\+' | head -1)
              if [ -n "$REQ" ] && [ -f android/app/build.gradle ]; then
                sed -i -E "s/minSdk *= *[0-9]+/minSdk = ${REQ}/" android/app/build.gradle || true
              fi
            fi
          }
          
          try_build() {
            flutter --version 2>&1 | tee -a "$LOG"
            flutter pub get 2>&1 | tee -a "$LOG"
            flutter build apk --release --split-per-abi 2>&1 | tee -a "$LOG"
            return ${PIPESTATUS[0]}
          }
          
          ensure_basics
          patch_gradle "8.7"
          
          for i in 1 2 3 4; do
            echo "=== Attempt $i/4 ===" | tee -a "$LOG"
            if try_build; then
              echo "BUILD_OK" | tee -a "$LOG"
              exit 0
            fi
            
            if grep -E "Minimum supported Gradle version is +([0-9.]+)" "$LOG" >/dev/null; then
              NEWG=$(grep -E "Minimum supported Gradle version is +([0-9.]+)" "$LOG" | head -1 | grep -oE '[0-9.]+' | head -1)
              if [ -n "$NEWG" ]; then
                echo "Upgrading Gradle to $NEWG" | tee -a "$LOG"
                patch_gradle "$NEWG"
                continue
              fi
            fi
            
            fix_issues
          done
          
          echo "BUILD_FAILED" | tee -a "$LOG"
          exit 1
          BUILDSCRIPT
          
          chmod +x ci-build.sh

      # 10) Run build
      - name: Run adaptive build
        run: |
          export PATH="$HOME/flutter/bin:$PATH"
          bash "$GITHUB_WORKSPACE/ci-build.sh" "${{ steps.findproj.outputs.project }}"

      # 11) Upload artifacts — SHA pinned
      - name: Upload APK and logs
        if: always()
        uses: actions/upload-artifact@50769540e7f4bd5e21e526ee35c689e35e0d6874 # v4.4.0
        with:
          name: android-apk
          path: |
            ${{ steps.findproj.outputs.project }}/build/app/outputs/flutter-apk/*.apk
            ${{ github.workspace }}/apk_build_log.txt
