name: Build Android APK (SHA-pinned + adaptive)

on:
  workflow_dispatch:
  push:
    paths:
      - '**.zip'
      - '**/pubspec.yaml'
      - '.github/workflows/build-android-apk.yml'

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      # 1) Checkout — SHA pinned
      - name: Checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      # 2) Java 17 — SHA pinned
      - name: Set up Java 17 (Temurin)
        uses: actions/setup-java@2dfa2011c5b2a0f1489bf9e433881c92c1631f88 # v4.3.0
        with:
          distribution: temurin
          java-version: '17'

      # 3) Install Flutter from git
      - name: Install Flutter (stable)
        run: |
          set -e
          git clone --depth 1 -b stable https://github.com/flutter/flutter.git "$HOME/flutter"
          echo "$HOME/flutter/bin" >> "$GITHUB_PATH"

      # 4) Install Android SDK manually
      - name: Install Android SDK
        run: |
          set -e
          mkdir -p "$HOME/android-sdk"
          cd "$HOME/android-sdk"
          curl -L -o cmdline-tools.zip https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip
          unzip -q cmdline-tools.zip
          rm -f cmdline-tools.zip
          mkdir -p cmdline-tools/latest
          mv cmdline-tools/* cmdline-tools/latest/ 2>/dev/null || true
          echo "$HOME/android-sdk/cmdline-tools/latest/bin" >> "$GITHUB_PATH"
          echo "$HOME/android-sdk/platform-tools" >> "$GITHUB_PATH"
          echo "ANDROID_HOME=$HOME/android-sdk" >> "$GITHUB_ENV"
          echo "ANDROID_SDK_ROOT=$HOME/android-sdk" >> "$GITHUB_ENV"

      # 5) Accept licenses & install SDK
      - name: Install Android SDK components
        run: |
          set -e
          yes | "$HOME/android-sdk/cmdline-tools/latest/bin/sdkmanager" --licenses || true
          "$HOME/android-sdk/cmdline-tools/latest/bin/sdkmanager" \
            "platform-tools" \
            "platforms;android-36" \
            "build-tools;35.0.0" || \
          "$HOME/android-sdk/cmdline-tools/latest/bin/sdkmanager" \
            "platform-tools" \
            "platforms;android-34" \
            "build-tools;34.0.0"

      # 6) Verify Flutter is working
      - name: Verify Flutter installation
        run: |
          export PATH="$HOME/flutter/bin:$PATH"
          which flutter
          flutter --version
          flutter doctor -v

      # 7) Locate Flutter project
      - name: Locate Flutter project
        id: findproj
        run: |
          set -e
          if [ -d "benvis" ] && [ -f "benvis/pubspec.yaml" ]; then
            echo "project=benvis" >> "$GITHUB_OUTPUT"
            echo "Found project: benvis"
          else
            echo "ERROR: benvis/pubspec.yaml not found!"
            ls -la
            exit 1
          fi

      # 8) Prepare Android config
      - name: Prepare Android configuration
        working-directory: ${{ steps.findproj.outputs.project }}
        run: |
          set -e
          mkdir -p android/gradle/wrapper
          
          # Set Gradle 8.7
          echo "distributionUrl=https://services.gradle.org/distributions/gradle-8.7-all.zip" > android/gradle/wrapper/gradle-wrapper.properties
          
          # Configure gradle.properties
          cat >> android/gradle.properties << EOF
          android.useAndroidX=true
          android.enableJetifier=true
          org.gradle.jvmargs=-Xmx4096m -Dfile.encoding=UTF-8
          EOF
          
          echo "Android config prepared"

      # 9) Flutter pub get
      - name: Flutter pub get
        working-directory: ${{ steps.findproj.outputs.project }}
        run: |
          export PATH="$HOME/flutter/bin:$PATH"
          flutter pub get

      # 10) Build APK (attempt 1)
      - name: Build APK (Attempt 1)
        id: build1
        continue-on-error: true
        working-directory: ${{ steps.findproj.outputs.project }}
        run: |
          export PATH="$HOME/flutter/bin:$PATH"
          flutter build apk --release --split-per-abi

      # 11) If failed, try with Gradle 8.9
      - name: Build APK (Attempt 2 - Gradle 8.9)
        if: steps.build1.outcome == 'failure'
        id: build2
        continue-on-error: true
        working-directory: ${{ steps.findproj.outputs.project }}
        run: |
          export PATH="$HOME/flutter/bin:$PATH"
          echo "distributionUrl=https://services.gradle.org/distributions/gradle-8.9-all.zip" > android/gradle/wrapper/gradle-wrapper.properties
          flutter clean
          flutter pub get
          flutter build apk --release --split-per-abi

      # 12) If still failed, try universal APK
      - name: Build APK (Attempt 3 - Universal)
        if: steps.build1.outcome == 'failure' && steps.build2.outcome == 'failure'
        working-directory: ${{ steps.findproj.outputs.project }}
        run: |
          export PATH="$HOME/flutter/bin:$PATH"
          flutter build apk --release

      # 13) List generated APKs
      - name: List APK files
        if: always()
        working-directory: ${{ steps.findproj.outputs.project }}
        run: |
          echo "=== APK Output Directory ==="
          ls -lah build/app/outputs/flutter-apk/ || echo "No APK directory found"

      # 14) Upload artifacts — SHA pinned
      - name: Upload APK artifacts
        if: always()
        uses: actions/upload-artifact@50769540e7f4bd5e21e526ee35c689e35e0d6874 # v4.4.0
        with:
          name: android-apk
          path: |
            ${{ steps.findproj.outputs.project }}/build/app/outputs/flutter-apk/*.apk
          if-no-files-found: warn
